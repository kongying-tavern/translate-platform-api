!include_files ./string.ds

fn print_banner
    banner = readfile "${1}"
    echo ${banner}
end

fn print_env_path
    echo_label "${1}" ":"
    env_file = get_env ENV_FILE
    println -c magenta "  ${env_file}"
end

fn get_command_input
    echo_label "${1}" " >>>"
    cmd_name = read
    exec cargo make ${cmd_name}
end

fn get_help_commands
    commands = array
    makefile = readfile ./Makefile.toml
    lines = split ${makefile} "\n"
    tag = set "${1}"
    tag_len = length "${tag}"
    modifier = set "${2}"
    modifier_len = length "${modifier}"

    for line in ${lines}
        exist_task = starts_with ${line} "[tasks."
        exist_desc = contains ${line} "${1}"
        if ${exist_task} and ${exist_desc}
            # Get command name
            name_start = indexof ${line} "[tasks."
            name_start = calc ${name_start} + 7 # 7 is length of `[tasks.`
            name_end = indexof ${line} "]"
            cmd_name = substring ${line} ${name_start} ${name_end}

            # Get full content
            content_start = calc ${name_end} + 1 # 1 is length of `]`
            full_content = substring ${line} ${content_start}
            content_start = indexof ${full_content} "${tag}"
            full_content = substring ${full_content} ${content_start}
            full_content = trim ${full_content}

            # Get command indent & desc
            if starts_with ${full_content} "${tag}${modifier}"
                indent_len = set 2
                cmd_color = set green
                cmd_prefix_len = length "${1}${2}"
            else
                indent_len = set 0
                cmd_color = set blue
                cmd_prefix_len = length "${1}"
            end
            cmd_indent = str_repeat " " ${indent_len}
            cmd_desc = substring ${full_content} ${cmd_prefix_len}
            cmd_desc = trim "${cmd_desc}"

            # Prepare entity map
            cmd_map = map
            map_put ${cmd_map} color ${cmd_color}
            map_put ${cmd_map} indent ${cmd_indent}
            map_put ${cmd_map} name ${cmd_name}
            map_put ${cmd_map} desc ${cmd_desc}

            array_push ${commands} ${cmd_map}
        end
    end

    release ${lines}
    return ${commands}
end

fn print_help_commands
    cmds = set ${1}
    cmd_name_width = set ${2}

    echo_label "${3}" ":"

    # Get longest name length
    gap_threshold = set ${cmd_name_width}
    for cmd in ${cmds}
        cmd_name = map_get ${cmd} name
        cmd_len = length ${cmd_name}
        cmd_len = calc ${cmd_len} + 2
        if greater_than ${cmd_len} ${gap_threshold}
            gap_threshold = set ${cmd_len}
        end
    end

    for cmd in ${cmds}
        cmd_color = map_get ${cmd} color
        cmd_indent = map_get ${cmd} indent
        cmd_name = map_get ${cmd} name
        cmd_desc = map_get ${cmd} desc

        # Get command gap
        name_len = length ${cmd_name}
        indent_len = length ${cmd_indent}
        gap_len = calc ${gap_threshold} - ${name_len} - ${indent_len}
        cmd_gap = str_repeat " " ${gap_len}

        # Print help command
        print ${cmd_indent}
        print "  - "
        print -c ${cmd_color} ${cmd_name}
        print ${cmd_gap}
        print " "
        print ${cmd_desc}
        echo

        release ${cmd}
    end
end
